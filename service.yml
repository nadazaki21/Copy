Description: 
   Services reuired for the Webapp to be hosted 

Parameters:


  WorkflowID:
      Description: An environment name that will be prefixed to resource names
      Type: String
  

  Wf:
    Description: An environment name that will be prefixed to resource names
    Type: String

  Wf2:
    Description: An environment name that will be prefixed to resource names
    Type: String


  # AMItoUse:
  #     Description: AMI to use for our base image
  #     Type: String


  # BucketName:
  #   Description: The bucket containing static website files
  #   Type: String
  #   Default: projectnada
  

  
  # WorkflowID:
  #   Description: Unique identifier.
  #   Type: String
  #   Default: !Sub ${CIRCLE_WORKFLOW_ID:0:5}


Resources:

  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue: "VPC"
      GroupDescription: Allow HTTP from anywhere, and HTTP to the Web Servers
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
    

  

  # WebServerASGLaunchConfiguration:
  #   Type: AWS::AutoScaling::LaunchConfiguration
  #   Properties:
  #     ImageId: ami-0574da719dca65348
  #     InstanceType: t2.medium
  #     InstanceMonitoring: true
  #     SecurityGroups:
  #       - Fn::ImportValue:  "InstanceSecurity"
  #     IamInstanceProfile: 
  #       Fn::ImportValue:  "InstanceProfile"
  #     BlockDeviceMappings:
  #       - DeviceName: /dev/sda1
  #         Ebs:
  #           VolumeSize: 10
  #           DeleteOnTermination: true
  #     UserData:
  #       Fn::Base64: !Sub |
  #         #!/bin/bash
  #         apt update -y
  #         apt install nginx  awscli -y

          
  #         rm -rf /var/www/html/index.html

          


  #         cd /var/www/html

  #         echo "              It works! Udagram, Udacity "  >> index.html 

     
  


#Auto scaling group:  

  TargetGroup:  #The Amazon Resource Names (ARN) of the Elastic *Load Balancing target groups* to associate with the Auto Scaling group.
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Fn::ImportValue:  "VPC"
      Port: 80
      Protocol: HTTP
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Tags: 
        - Key: Identifier
          Value: !Sub ${WorkflowID}
    

  # AutoScalingGroup:
  #   Type: AWS::AutoScaling::AutoScalingGroup
  #   UpdatePolicy:
  #     AutoScalingReplacingUpdate:
  #       WillReplace: true
  #   Properties:
  #     LaunchConfigurationName: !Ref WebServerASGLaunchConfiguration
  #     MaxSize: 4
  #     MinSize: 2
  #     DesiredCapacity: 2

  #     VPCZoneIdentifier:
  #       - Fn::ImportValue:  "Private-Subnet-1"
  #       - Fn::ImportValue:  "Private-Subnet-2"

  #     TargetGroupARNs:
  #       - !Ref TargetGroup

  # AutoScalingPolicy:  ## The metric type to be tracked, which for simplicity will be tracking the Average CPU Utilization of the ASG instances
  #   Type: AWS::AutoScaling::ScalingPolicy
  #   Properties:
  #     AutoScalingGroupName: !Ref AutoScalingGroup
  #     PolicyType: TargetTrackingScaling
  #     TargetTrackingConfiguration:
  #       PredefinedMetricSpecification:
  #         PredefinedMetricType: ASGAverageCPUUtilization
  #       TargetValue: 30

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name:  "LoadBalancer"
      Subnets:
        - Fn::ImportValue:  "Public-Subnet1"
        - Fn::ImportValue:  "Public-Subnet2"
      SecurityGroups:
        - !Ref LBSecurityGroup
      Tags: 
        - Key: Name
          Value: !Sub ${WorkflowID}
  

  LBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - "/*"    # any pattern
      ListenerArn: !Ref LBListener
      Priority: 1
  

  JumpboxSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue: "VPC"
      GroupDescription: Allow SSH from anywhere
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  #more secure to be limited to my own ip 

  Jumpbox:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0574da719dca65348
      SecurityGroupIds: 
        - Ref: JumpboxSecurityGroup
      SubnetId:
        Fn::ImportValue:  "Public-Subnet1"
      Tags: 
        - Key: Name
          Value: !Sub ${WorkflowID}
            
     
Outputs:

  JumpboxPublicHostname:
    Description: The Public IP Address of Jumpbox 
    Value: !GetAtt Jumpbox.PublicIp


  LoadBalancerDNSName:
    Description: DNS Name of the web application
    Value: !Join
      - ""
      - - "http://"
        - !GetAtt LoadBalancer.DNSName
    Export:
      Name:  !Sub "${WorkflowID}-ELB-DNS-Name"

  WorkflowID:
    Value: !Sub ${WorkflowID}
    Description: Work flow number of old stack 
    Export:
      Name: !Sub WorkflowID-${WorkflowID}

  TargetGroup:
    Description: LB Target group id 
    Value: !Ref  TargetGroup
    Export:
      Name: TargetGroup

