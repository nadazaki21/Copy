Description: 
   Netrwork base for Hosting WebApp.

Parameters:

    EnvironmentName:
      Description: An environment name that will be prefixed to resource names
      Type: String

    VPCCIDR:
      Description: Please enter the IP range (CIDR notation) for this
      Type: String
      Default: 10.0.0.0/16
    
    PrivSubnet1CIDR:
      Description: private subnet cidr block for private subnet 1 
      Type: String
    
    PrivSubnet2CIDR:
      Description: private subnet cidr block for private subnet  2 
      Type: String

    PubSubnetCIDR1:
      Description: public subnet cidr block
      Type: String
    
    PubSubnetCIDR2:
      Description: public subnet cidr block
      Type: String


    EC2Type:
      Description: EC2 type
      Type: String

    AZ1:
      Description: AZ subnet  1
      Type: String

    AZ2:
      Description: AZ subnet 2
      Type: String

    



Resources:


    MainVPC:
      Type: AWS::EC2::VPC
      Properties: 
        CidrBlock: !Ref VPCCIDR
        EnableDnsSupport: true
        EnableDnsHostnames: true
        
    # VPC:
    #   Type: AWS::EC2::VPC
    #   Properties: 
    #     CidrBlock: !Ref VPCCIDR
    #     EnableDnsSupport: true
    #     EnableDnsHostnames: true

    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties: 
        AvailabilityZone: !Ref AZ1 
        CidrBlock: !Ref PrivSubnet1CIDR
        MapPublicIpOnLaunch: false
        VpcId: !Ref MainVPC 
        Tags: 
          - Key: Name 
            Value: !Sub ${EnvironmentName} Private Subnet1 

    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties: 
        AvailabilityZone: !Ref AZ2
        CidrBlock: !Ref PrivSubnet2CIDR
        MapPublicIpOnLaunch: false
        VpcId: !Ref MainVPC  
        Tags: 
          - Key: Name 
            Value: !Sub ${EnvironmentName} Private Subnet2  

    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties: 
        AvailabilityZone: !Ref AZ1
        CidrBlock: !Ref PubSubnetCIDR1
        MapPublicIpOnLaunch: true
        VpcId: !Ref MainVPC  
        
    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties: 
        AvailabilityZone: !Ref AZ2
        CidrBlock: !Ref PubSubnetCIDR2
        MapPublicIpOnLaunch: true
        VpcId: !Ref MainVPC  
        

    # PublicSubnet:
    #   Type: AWS::EC2::Subnet
    #   Properties: 
    #     AvailabilityZone: us-east-1b
    #     CidrBlock: 10.0.5.0/24
    #     MapPublicIpOnLaunch: true
    #     VpcId: !Ref VPC  
        
            

    InternetGW:
      Type: AWS::EC2::InternetGateway

    AttachInternetGateway:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref MainVPC
        InternetGatewayId: !Ref InternetGW  

    # InternetGW:
    #   Type: AWS::EC2::InternetGateway

    # AttachInternetGateway:
    #   Type: AWS::EC2::VPCGatewayAttachment
    #   Properties:
    #     VpcId: !Ref VPC
    #     InternetGatewayId: !Ref InternetGW  

    NatGatewayEIP:
          Type: AWS::EC2::EIP
          DependsOn: AttachInternetGateway
          Properties: 
              Domain: vpc
        
    NatGateway: 
      Type: AWS::EC2::NatGateway
      Properties: 
          AllocationId: !GetAtt NatGatewayEIP.AllocationId
          SubnetId: !Ref PublicSubnet2  #NAT gateways must be in public subnet

    InstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties: 
        InstanceProfileName: EC2Instance
        Roles: 
          - "react"  
  

    InstanceSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allowing web requests and ssh connection with my public ip 
        VpcId: !Ref MainVPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0  # you can limit shh connection to your own public ip only 
        SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0    

    #private route tables 
    PrivateRouteTable1:
      Type: AWS::EC2::RouteTable
      Properties: 
        Tags: 
          - Key: Name
            Value: "Private Route Table"
        VpcId: !Ref MainVPC

    PrivateRouteTable2:
      Type: AWS::EC2::RouteTable
      Properties: 
        Tags: 
          - Key: Name
            Value: "Private Route Table"
        VpcId: !Ref MainVPC

    AssociatePRIVRT1toRT:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties: 
        RouteTableId: !Ref PrivateRouteTable1
        SubnetId: !Ref PrivateSubnet1
    
    AssociatePRIVRT2toRT:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties: 
        RouteTableId: !Ref PrivateRouteTable2
        SubnetId: !Ref PrivateSubnet2

    PrivateInternetOutboundRoute1:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: PrivateRouteTable1
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId:
          Ref: NatGateway

    PrivateInternetOutboundRoute2:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: PrivateRouteTable2
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId:
          Ref: NatGateway


    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties: 
        VpcId: !Ref MainVPC  # The route table cannot use the Internet Gateway until it has successfully attached to the VPC.


    # PublicRouteTable:
    #   Type: AWS::EC2::RouteTable
    #   Properties: 
    #       VpcId: !Ref VPC

   

    AssociatePUBLIC1toRT:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties: 
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet1
    
    AssociatePUBLIC2toRT:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties: 
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet2
    
    # PublicSubnet1RouteTableAssociation:
    #     Type: AWS::EC2::SubnetRouteTableAssociation
    #     Properties:
    #         RouteTableId: !Ref PublicRouteTable
    #         SubnetId: !Ref PublicSubnet
    
    
    PublicInternetOutboundRoute:
      Type: AWS::EC2::Route
      DependsOn: AttachInternetGateway #If you create a route that references an Internet Gateway in the same template where you create the Internet Gateway, you must declare a dependency on the Internet Gateway attachment.
      Properties:
        RouteTableId:
          Ref: PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: InternetGW

    

    
        
    # DefaultPublicRoute: 
    #     Type: AWS::EC2::Route
    #     DependsOn: AttachInternetGateway
    #     Properties: 
    #         RouteTableId: !Ref PublicRouteTable
    #         DestinationCidrBlock: 0.0.0.0/0
    #         GatewayId: !Ref InternetGW

    
          


Outputs:

  VPC:
    Description: VPC ID
    Value: !Ref MainVPC
    Export:
      Name: "VPC"

  PublicSubnet1:
    Description: Public Subnet ID
    Value: !Ref PublicSubnet1
    Export:
      Name: "Public-Subnet1"

  PublicSubnet2:
    Description: Public Subnet ID
    Value: !Ref PublicSubnet2
    Export:
      Name: "Public-Subnet2"

  
  PrivateSubnet1:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export:
      Name:  "Private-Subnet-1"

  PrivateSubnet2:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: "Private-Subnet-2"

  EC2Security:
    Description: Instances security rules 
    Value: !Ref InstanceSecurityGroup
    Export:
      Name:  "InstanceSecurity"
 
  
  EC2Profile:
    Description: Instances security rules 
    Value: !Ref  InstanceProfile
    Export:
      Name:  "InstanceProfile"

 




